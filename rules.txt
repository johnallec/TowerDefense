%torrette totali (fatti)
torre(1..6).

%torrette già attive (fatti)
attiva(1).
attiva(3).
attiva(4).

%costo base torri (fatti)
costoTorre(10).

%monete a disposiione (fatti)
monete(15).

%elenco abilità torri e costi (fatti)
abilita(colpoDoppio,10).
abilita(velocita,8).
abilita(lanciafiamme,15).

% ablità A per torre T abilitaTorre(A,T) (fatti)
abilitaTorre(colpoDoppio,1).
abilitaTorre(velocita,4).

% N nemici con abilità A abilitaNemici(N,A) (fatti)
abilitaNemici(3,base).
abilitaNemici(3,fuoco).
abilitaNemici(3,corsa).
abilitaNemici(3,resistenza).

moneteSpese(MS):- #sum{C,T : attivata(T), costoTorre(C)} = MS1, #sum{C,A : nuovaAbilitaTorre(A,_), abilita(A,C)} = MS2, MS = MS1 + MS2.

torretteAttive(N):- #count{T:attiva(T)} = N.

nuovaAbilitaTorre(A,T) | nonNuovaAbilitaTorre(A,T):- attiva(T), abilita(A,C), monete(M), C < M, torretteAttive(TorriAttive), #max{Torre:torre(Torre)} <= TorriAttive*2.

attivata(T) | nonAttivata(T):- torre(T), costoTorre(C), monete(M), C <= M, not attiva(T).

:- nuovaAbilitaTorre(A1,T), nuovaAbilitaTorre(A2,T), A1 != A2.

%non si può spendere più di quanto si possiede
:- monete(M), moneteSpese(MS), MS > M.
:~ torretteAttive(TorriAttive), #max{Torre:torre(Torre)} <= TorriAttive*2, #count{T:attivata(T)} = NumeroTorriAttivate. [NumeroTorriAttivate@2]

% 1 torretta gestisce N nemici, non bisogna aggiungere o fare upgrade se ci sono per esempio N*2 nemici in gioco e 2 torrette disponibili
% cambiare abilità torri in upgrade livello 1-2-3