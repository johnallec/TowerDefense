%torre(ATTIVA,PIATTAFORMA,LIVELLO,TIPO,COSTO_TORRETTA,COSTO_AUMENTO_LIVELLO). fatti

%monete a disposiione (fatti)
%monete(15).

% N nemici con abilità A abilitaNemici(N,A) (fatti)
%abilitaNemici(3,base).
%abilitaNemici(3,fuoco).
%abilitaNemici(3,corsa).
%abilitaNemici(3,resistenza).

livelloTorretta(L,T):- torre(1,T,L,_,_,_).

numeroTorriTotali(NT):- #max{Piattaforma:torre(_,Piattaforma,_,_,_,_)} = NT.

numeroTorriConUpgrade(NU):- #count{Livello,Piattaforma:torre(1,Piattaforma,Livello,_,_,_),Livello>1} = NU.

moneteSpese(MS):- #sum{CostoTorre,Piattaforma : attivata(Piattaforma), torre(_,Piattaforma,_,_,CostoTorre,_)} = MS1. %, #sum{C,T : nuovoLivelloTorretta(_,T), costoAumentoLivello(C)} = MS2, MS = MS1 + MS2.

torretteAttive(N):- #count{Piattaforma:torre(1,Piattaforma,_,_,_,_)} = N.

%nuovoLivelloTorretta(A,T) | nonNuovoLivelloTorretta(A,T):- attiva(T), livelloTorretta(L,T), L < 3.

attivata(Piattaforma) | nonAttivata(Piattaforma):- torre(0,Piattaforma,_,_,CostoTorre,_), monete(M), CostoTorre <= M.

%:~ torretteAttive(TorriAttive), numeroTorriTotali(NT), numeroTorriConUpgrade(NU), NT <= TorriAttive - NU * 2, #count{T:attivata(T)} = NumeroTorriAttivate, NumeroTorriAttivate + TorriAttive <  NT. [NumeroTorriAttivate@2]

%:- nuovaAbilitaTorre(A1,T), nuovaAbilitaTorre(A2,T), A1 != A2.

%non si può spendere più di quanto si possiede
:- monete(M), moneteSpese(MS), MS > M.

% 1 torretta gestisce N nemici, non bisogna aggiungere o fare upgrade se ci sono per esempio N*2 nemici in gioco e 2 torrette disponibili (aggiungere
% un predicato che ritorna lo script dove si valuta una situazione di "tranquillità")

% creare 2 tipi di torri differenti ognuno con propri ugrade (livello 1-2-3)